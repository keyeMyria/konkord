"""
Django settings for konkord project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import sys

ugettext = lambda s: s

gettext = lambda s: s


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
APPS_DIR = os.path.join(BASE_DIR, 'apps')
sys.path.insert(0, APPS_DIR)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1*0c%3vx(3#)99bveov*u1y8!-w8yl7ql1+fq*c=3_f2^u+n5@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


INSTALLED_APPS = [
    'suit',
    'basic_theme',
    'modeltranslation',
    'users',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'mptt',
    'genericadmin',
    'django_mptt_admin',
    'codemirror',
    'suit_ckeditor',
    'tasks',
    'django_rq',
    'scheduler',
    'search',
    'catalog',
    'core',
    'filters',
    'bootstrap3',
    'snowpenguin.django.recaptcha2',
    'exchange',
    'checkout',
    'mail',
    'adminconfig',
    'reviews',
    'static_pages',
    'delivery',
]
# Application definition


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'konkord.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.site',
            ],
        },
    },
]

WSGI_APPLICATION = 'konkord.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.User'

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

MEDIA_URL = '/media/'

APPS_URLS = []

RQ_QUEUES = {
    'default': {
        'HOST': 'localhost',
        'PORT': 6379,
        'DB': 0,
        'DEFAULT_TIMEOUT': 360,
    },
}
gettext = lambda s: s
LANGUAGES = (
    ('ru', gettext('Russian')),
    ('uk', gettext('Ukrainian')),
)
# SUIT_CONFIG = {
#     'ADMIN_NAME': 'Konkord',
#     'HEADER_DATE_FORMAT': 'l, j F Y',   # Saturday, 16 March 2013
#     'HEADER_TIME_FORMAT': 'H:i',        # 18:42
#
#     'MENU': (
#         {
#             'label': 'Jobs',
#             'icon': 'icon-tasks',
#             'tag': 'jobs',
#             'models': (
#                 {'url': 'rq_home', 'label': 'Django RQ'},
#                 {
#                     'url': 'scheduler_home',
#                     'label':'Scheduler state',
#                 },
#                 'scheduler.repeatablejob',
#                 'scheduler.scheduledjob',
#                 {'model': 'tasks.job', 'label': 'Jobs'},
#             ),
#         },
#     )
# }

from tasks.api import RQTaskQueue

ACTIVE_TASK_QUEUE = RQTaskQueue()

FROM_EMAIL = 'dev'
ORDER_NUMBER_PREFIX = ''
ADMIN_CONFIGURERS = (
    ('core', ugettext('Core'), 'core.configurer.CoreConfig'),
)

CODEMIRROR_THEME = 'neat'

SUIT_CONFIG = {
    'ADMIN_NAME': 'Konkord',
    'HEADER_DATE_FORMAT': 'l, j F Y',   # Saturday, 16 March 2013
    'HEADER_TIME_FORMAT': 'H:i',        # 18:42

    'MENU': (
        {
            'label': gettext('Filters'),
            'icon': 'icon-filter',
            'tag': 'filters',
            'models': (
                'filters.filter',
                'filters.filteroption'
            )
        },
        {
            'label': gettext('Jobs'),
            'icon': 'icon-tasks',
            'tag': 'jobs',
            'models': (
                {'url': 'rq_home', 'label': gettext('Django RQ')},
                {
                    'url': 'scheduler_home',
                    'label': gettext('Scheduler state'),
                },
                'scheduler.repeatablejob',
                'scheduler.scheduledjob',
                {'model': 'tasks.job', 'label': gettext('Jobs')},
            ),
        },
        {
            'label': gettext('Configuration'),
            'icon': 'icon-settings',
            'tag': 'configuration',
            'models': (
                {'url': 'admin_config_index', 'label': gettext('Configuration')},
            ),
        },
    )
}
SITE_ID = 1

try:
    LOCAL_SETTINGS
except:
    from .local_settings import *

GLOBAL_JSON_CONFIG = os.path.join(BASE_DIR, 'config.json')

SITE_LOGO = STATIC_URL + 'images/default_logo.png'
